final_county_data %>%
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
####################ANALYTICS############################
library(covid19.analytics)
#animated plotting against day_no for US
data %>%
ggplot(aes(x = day_no, y = total_cases)) +
geom_line(color="#69b3a2")+
geom_point(size = 1.5) +
geom_area(fill="#69b3a2", alpha=0.5)+
transition_reveal(total_cases)+
ggtitle("Cumulative cases in US from 31 Jan 2020")+
ylab("Cumulative cases in US")+
theme_minimal()
#data file for animated US covid cases
data<-read.csv("D:/Rmlearning/CSV files/us_coviddata_date.csv",
header=T)
#animated plotting against day_no for US
data %>%
ggplot(aes(x = day_no, y = total_cases)) +
geom_line(color="#69b3a2")+
geom_point(size = 1.5) +
geom_area(fill="#69b3a2", alpha=0.5)+
transition_reveal(total_cases)+
ggtitle("Cumulative cases in US from 31 Jan 2020")+
ylab("Cumulative cases in US")+
theme_minimal()
#totals per location
tots.per.location(conf, geo.loc = 'US')
library(ggplot2)
cars=c("Dogs", "Cats", "Fish", "Rabbit", "Others")
perc=c(55, 30, 6, 5, 4)
#Using pie function
pie(perc, labels=cars,
density=10,angle=c(20,90,30,10,0),
main="Pie Chart")
# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(5, "Set2")
# You can change the border of each area with the
#classical parameters:
pie(perc, labels = cars,
border="white", col=myPalette,
main="Pie Chart of Pet")
df<-data.frame(
cars=c("Dogs", "Cats", "Fish", "Rabbit", "Others"),
perc=c(55, 30, 6, 5, 4))
# Basic piechart
ggplot(df, aes(x="", y=perc, fill=cars)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
ggplot(all, aes(x=long, y=lat, group=group, fill=region))+
geom_polygon(color='black')+
guides(fill=FALSE)
#world map
all<-map_data('world')
ggplot(all, aes(x=long, y=lat, group=group, fill=region))+
geom_polygon(color='black')+
guides(fill=FALSE)
#install packages to be used later
#if packages are not installed remove # from install.packages
#install.packages("caret")
library(caret) #for easily computing cross validation methods
#install.packages("ellipse")
library(ellipse) #for using ellipse function
#install.packages("e1071")
library(e1071) #implementation of SVM in R
#install.packages("kernlab")
library(kernlab)#implementation of KNN
#install.packages("dplyr")
library(dplyr)#data manipulation
#install.packages("randomForest")
library(randomForest)#implementation of random forest
#Reading the dataset from files_used->iris.csv
dataset<-read.csv("G:/Akshat data/R_project_data/iris.csv",
header=FALSE)
#assigning column names
colnames(dataset) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width","Species")
head(dataset)
#types of columns in dataset
str(dataset)
#converting the species to factor as only 3 levels are their
levels(dataset$Species)
dataset$Species<-as.factor(dataset$Species)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
#dimension of new dataset after removing validation
dim(dataset)
#distribution of different species in absolute numbers
table(dataset$Species)
#distribution of different species in percentages
percentage <- with(dataset, table(dataset$Species)) %>% prop.table()*100
print(percentage)
#summarise attribute distribution
summary(dataset)
# split input and output for data representation
#y for species and x for other variables
x <- dataset[,1:4]
y <- dataset[,5]
#barplot
plot(y)
# boxplot for each attribute on one image
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
# scatterplot matrix
featurePlot(x=x, y=y ,plot="ellipse") #caret package
featurePlot(x=x, y=y ,plot="box")
# density plots for each attribute by class value
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
library(leaflet)
# Background 1: NASA
a <- leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012")
a
library(htmltools)
library(maps)
library(mapproj)
library(mapdata)
library(tidyverse)
library(ggmap)
library(leaflet)
library(leaflet.extras)
#adding provider to the leaflet
#marking the centre of US i.e.Belle Fourche, South Dakota
leaflet() %>% addProviderTiles("OpenStreetMap") %>%
setView(lng=-103.46, lat=44.58, zoom=5)  %>%
addCircleMarkers(lng=-103.46,
lat=44.58,
radius=10,
color='red')
#setting the color palette
mycolor<-colorNumeric(palette = "RdBu",
domain = c(1:209878),
reverse=T)
final_county_data %>%
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
#covid date by counties
final_county_data<-read.csv("D:/Rmlearning/CSV files/
final_usa_county.csv",
header=T)
#covid date by counties
final_county_data<-read.csv("D:/Rmlearning/CSV files/final_usa_county.csv",
header=T)
#setting the color palette
mycolor<-colorNumeric(palette = "RdBu",
domain = c(1:209878),
reverse=T)
final_county_data %>%
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
#names of all providers
names(providers)
final_county_data %>%
leaflet() %>%
addProviderTiles("OpenTopoMap") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
final_county_data %>%
leaflet() %>%
addProviderTiles("OpenMapSurfer") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
final_county_data %>%
leaflet() %>%
addProviderTiles("OneMapSG.LandLot") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
final_county_data %>%
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(radius= ~0.0007*Confirmed,
color= ~mycolor(Confirmed)) %>%
addLegend(pal = mycolor,
values = c(1:209878),
opacity=0.9,
title = "Confirmed cases",
position = 'topright')
library(caret)
library(caret)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
```{r}
library(caret)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
```
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x<-iris[,1:4],
y<-iris[,5])
featurePlot(x<-iris[,1:4],
y<-iris[,5]
plot="boxplot")
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot")
scales = list(y = list(relation="free"),
x = list(rot = 90)),
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot"),
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(1,4 ),
auto.key = list(columns = 2))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
layout = c(1,4 ),
auto.key = list(columns = 2))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(1,4 ),
auto.key = list(columns = 2))
layout = c(1,4 )
layout = c(1,4 )
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(1,4 ))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x<-iris[,1:4],
y<-iris[,5],
plot="boxplot",
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "scatter",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "scatter",
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "scatter",
layout = c(4,1 ))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "scatter")
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "density")
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "density",
scales=list(x=list(relation="free"),
y=list(relation="free")),
auto.key=list(columns=3)
)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "density",
scales=list(x=list(relation="free"),
y=list(relation="free")),
auto.key=list(columns=31)
)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "density",
scales=list(x=list(relation="free"),
y=list(relation="free")),
auto.key=list(columns=1)
)
library(ggplot2)
ggplot(iris)
ggplot(diamonds)
ggplot(diamonds)
data(iris)
ggplot(iris)
ggplot(x<-iris[,1:4], y<-iris[,5])
ggplot(aes(x<-iris[,1:4], y<-iris[,5]))
ggplot(iris, aes(x<-iris[,1:4], y<-iris[,5]))
ggplot(iris, aes(x<-iris$Sepal.Length, y<-iris$Species))
ggplot(iris, aes(x<-Sepal.Length, y<-Species))
ggplot(iris, aes(x<-Sepal.Length, y<-Species))+
geom_point()
diamonds
head(diamonds, n=5)
ggplot(diamonds, aes(x=carat, y=price, color=cut)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) +
geom_point() +
geom_smooth()
head(iris, n=3)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point() +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point()+geom_smooth()
head(iris, n=3)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) +
geom_point(aes(color=Species)) +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species))
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) +
geom_point()+geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) +
geom_point(aes(color=Species)) +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) +
geom_point(aes(color=Species)) +
geom_smooth()+
labs(title="Scatterplot", x="Sepal Length", y="Petal Length")
print(gg)
gg<-ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) +
geom_point(aes(color=Species)) +
geom_smooth()+
labs(title="Scatterplot", x="Sepal Length", y="Petal Length")
plot(gg)
print(gg1)  # print the plot
gg1 <- gg + theme(plot.title=element_text(size=30, face="bold"),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15),
axis.title.x=element_text(size=25),
axis.title.y=element_text(size=25)) +
scale_color_discrete(name="Cut of diamonds")  # add title and axis text, change legend title.
print(gg1)  # print the plot
print(gg1)
gg1 <- gg + theme(plot.title=element_text(size=30, face="bold"),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15),
axis.title.x=element_text(size=25),
axis.title.y=element_text(size=25)) +
scale_color_discrete(name="Species") #legend title
gg1 <- gg + theme(plot.title=element_text(size=30, face="bold"),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15),
axis.title.x=element_text(size=25),
axis.title.y=element_text(size=25)) +
scale_color_discrete(name="Species") #legend title
print(gg1)
gg1 + facet_wrap( ~ Species)
gg1 <- gg + theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15)) +
scale_color_discrete(name="Species") #legend title
print(gg1)
gg1 + facet_wrap( ~ Species)
gg1 + facet_wrap(color ~ Species, scales="free")
gg1 + facet_wrap(color ~ Species, scales="free")
gg1 + facet_wrap(~ Species, scales="free")
install.packages(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(AirPassengers) + labs(title="AirPassengers")
head(AirPassengers, n=3)
autoplot(AirPassengers) + labs(title="AirPassengers")
head(AirPassengers)
AirPassengers
View(AirPassengers)
plot1 <- ggplot(mtcars, aes(x=cyl)) + # Y axis derived from counts of X item
geom_bar() +
labs(title="Frequency bar chart")
print(plot1)
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
plot2 <- ggplot(df, aes(x=var, y=nums)) +
geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(plot2)
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
grid.arrange(plot1, plot2, ncol=2)
ggplot(df, aes(x=var, y=nums)) + geom_bar(stat = "identity") + coord_flip() + labs(title="Coordinates are flipped")
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
ggplot(df, aes(x=var, y=nums)) + geom_bar(stat = "identity") + coord_flip() + labs(title="Coordinates are flipped")
library(ggplot2)
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
ggplot(df, aes(x=var, y=nums)) + geom_bar(stat = "identity") + coord_flip() + labs(title="Coordinates are flipped")
ggplot(df, aes(x=var, y=nums)) +
coord_flip() +
labs(title="Coordinates are flipped")
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
ggplot(df, aes(x=var, y=nums)) +
coord_flip() +
labs(title="Coordinates are flipped")
df <- data.frame(var=c("a", "b", "c"), nums=c(1:3))
ggplot(df, aes(x=var, y=nums)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title="Coordinates are flipped")
grid.arrange(plot1, plot2, ncol=2)
gg1+theme_bw()
ggplot(mtcars, aes(x=cyl)) + geom_bar(fill="firebrick") + theme(plot.background=element_rect(fill="steelblue"),
plot.margin = unit(c(2, 4, 1, 3), "cm"))
getwd()
ggplot(mtcars, aes(x=cyl)) + geom_bar() + annotation_custom(my_grob) + labs(title="Annotation Example")
library(grid)
my_grob = grobTree(textGrob("This text is at x=0.1 and y=0.9, relative!\n Anchor point is at 0,0", x=0.1,  y=0.9, hjust=0,
gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
ggplot(mtcars, aes(x=cyl)) + geom_bar() + annotation_custom(my_grob) + labs(title="Annotation Example")
setwd(D:\Rmlearning\R_files)
setwd("D:/Rmlearning/R_files")
getwd()
